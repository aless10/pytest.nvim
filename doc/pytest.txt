*pytest.nvim*  	   a simple plugin for making pytest snippet and running tests

                                         Type |gO| to see the table of contents.
==============================================================================
INTRODUCTION                                                       *pytest.nvim*

pytest.nvim is a simple and fast plugin for making pytest snippet and running
the tests blazingly fast

Getting Start with pytest:
- Run `require('pytest').setup()` or use packer 'config' directive
- For making snippet use `:PytestMkSnip` or for visual selection use `:PytestMkSnipV`
  this commands will use treesitter to get the function name and docstring,
  more detail in |pytest.snippet|



pytest.setup({opts})                                            *pytest.setup()*
    Setup function to be run by user. Configures the behavior of plugin.

    Usage:
    >
    pytest.setup({
            testDir="tests"
            dirExistancePrmopt=nil
        })
<
    
    
SNIPPET                                                         *pytest.snippet*

snippet.insertSnippet({bufnr}, {mode}, {testDir}, {filename}) *pytest.snippet.insertSnippet*

    Description ~
    Get query from |pytest.getQuery| and pipe the output to |pytest.makeSnippet| 
    and write the output to {filename} on {testDir} directory.

    Parameters: ~
    {bufnr} 	(number)  the buffer number that the code is there
    {mode} 	(char)   the mode that query must consider when getting output, defualt 
    is 'n' that mean making snippet for all functions on file, and 'v' mean 
    just make snippet for the selected range
    {testDir} 	(string)  directory of test file
    {filename} 	(string)  name of the test file



snippet.makeSnippet({functionName}, {docstring})    *pytest.snippet.makeSnippet*

    Description~
    format the defualt template with functionName and docstring
    defualt template:
        >
        def test_%s():
            """ test %s """
            pass
<
            
    Parameters:~
    {functionName} (string) name of the function
    {docstring} (string) docstring of the function


EXECUTE                                                         *pytest.execute*

execute.setSignCol({id}, {state}, {bufnr}, {line})   *pytest.execute.setSignCol*

    Description~
    set a sign with |sign-place| based on {state}

    Parameters:~
    {id} (number) id of sign
    {state} (string) state of test report PASSED or FAILED
    {bufnr} (number) buffer number that sign will set on
    {line} (number) line of the test case


execute.processReport({report})                   *pytest.execute.processReport*

    Description~
    process the output of pytest command and extract function name and result 
    of test case

    Parameters:~
    {report} (string) output of pytest command

    Return: ~
    table: format function name and result of test case from the {report} into
    a table

execute.executePytest({bufnr}, {cmd}, {cwd})      *pytest.execute.executePytest*

    Description~
    a wrapper that call |pytest.execute.processReport| and
    |pytest.execute.setSignCol| and uses |job| to run pytest command

    Parameters:~
    {bufnr} (number) buffer number that test file is on
    {cmd} (string) the pytest command
    {cwd} (string) directory that test file is there


HELPER                                                           *pytest.helper*

helper.getQuery({pattern}, {bufnr}, {parser})           *pytest.helper.getQuery*

    Description~
    with the given treesitter query and parser return a table of matches
    from {bufnr} buffer.

    Parameters:~
    {pattern} (string) treesitter query
    {bufnr} (number) buffer number that treesitter will look for matches on it
    {parser} (table) treesitter parser if not given parser will gotten from {bufnr}

    Return: ~
    table: objects of all matches 

helper.createDir({dirName}, {prompt})                  *pytest.helper.createDir*

    Description~
    a wrapper that choose to make the {dirName} or ask for a directory name
    based on {prompt}

    Parameters:~
    {dirName} (string) directory name from opt table
    {prompt} (boolean) ask for a custom directory or uses {dirName} dir

    Return: ~
    string: the directory name



vim:tw=78:ts=8:ft=help:norl:
